// Analytics utility for tracking user interactions\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\nexport const trackEvent = async (event, data = {}, sessionId = null) => {\n  try {\n    await fetch(`${BACKEND_URL}/api/analytics/track`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        event,\n        data,\n        session_id: sessionId\n      })\n    });\n  } catch (error) {\n    console.log('Analytics tracking failed:', error);\n    // Don't throw error - analytics should not break user experience\n  }\n};\n\n// Pre-defined event types for consistency\nexport const ANALYTICS_EVENTS = {\n  PAGE_VIEW: 'page_view',\n  SECTION_VIEW: 'section_view', \n  BUTTON_CLICK: 'button_click',\n  RESUME_DOWNLOAD: 'resume_download',\n  PROJECT_LINK_CLICK: 'project_link_click',\n  SOCIAL_LINK_CLICK: 'social_link_click',\n  CHATBOT_OPEN: 'chatbot_open',\n  CHATBOT_MESSAGE: 'chatbot_message',\n  CONTACT_FORM_START: 'contact_form_start',\n  CONTACT_FORM_SUCCESS: 'contact_form_success',\n  NAVIGATION_CLICK: 'navigation_click',\n  THEME_TOGGLE: 'theme_toggle',\n  HERO_CTA_CLICK: 'hero_cta_click'\n};\n\n// Helper functions for common tracking scenarios\nexport const trackPageView = (section) => {\n  trackEvent(ANALYTICS_EVENTS.PAGE_VIEW, { section });\n};\n\nexport const trackButtonClick = (buttonName, section = null) => {\n  trackEvent(ANALYTICS_EVENTS.BUTTON_CLICK, { button: buttonName, section });\n};\n\nexport const trackResumeDownload = () => {\n  trackEvent(ANALYTICS_EVENTS.RESUME_DOWNLOAD, { \n    timestamp: new Date().toISOString(),\n    format: 'pdf'\n  });\n};\n\nexport const trackProjectClick = (projectName, linkType) => {\n  trackEvent(ANALYTICS_EVENTS.PROJECT_LINK_CLICK, { \n    project: projectName, \n    link_type: linkType // 'github' or 'demo'\n  });\n};\n\nexport const trackSocialClick = (platform) => {\n  trackEvent(ANALYTICS_EVENTS.SOCIAL_LINK_CLICK, { platform });\n};\n\nexport const trackChatbotInteraction = (action, sessionId = null) => {\n  if (action === 'open') {\n    trackEvent(ANALYTICS_EVENTS.CHATBOT_OPEN, {}, sessionId);\n  } else if (action === 'message') {\n    trackEvent(ANALYTICS_EVENTS.CHATBOT_MESSAGE, {}, sessionId);\n  }\n};\n\nexport const trackNavigation = (section) => {\n  trackEvent(ANALYTICS_EVENTS.NAVIGATION_CLICK, { target_section: section });\n};\n\nexport const trackThemeToggle = (newTheme) => {\n  trackEvent(ANALYTICS_EVENTS.THEME_TOGGLE, { theme: newTheme });\n};\n"